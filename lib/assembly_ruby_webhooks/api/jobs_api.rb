=begin
#Webhooks API

#This is the Swagger definition for the AssemblyPayment's Webhooks API

The version of the OpenAPI document: 1.0-external
Contact: support@assemblypayments.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'cgi'

module AssemblyRubyWebhooks
  class JobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Show job associated to Webhook
    # Show details of a specific **Job** response using a given `:id`.
    # @param uuid [String] ID of webhook
    # @param job_uuid [String] ID of Job
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def get_job(uuid, job_uuid, opts = {})
      data, _status_code, _headers = get_job_with_http_info(uuid, job_uuid, opts)
      data
    end

    # Show job associated to Webhook
    # Show details of a specific **Job** response using a given &#x60;:id&#x60;.
    # @param uuid [String] ID of webhook
    # @param job_uuid [String] ID of Job
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def get_job_with_http_info(uuid, job_uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobsApi.get_job ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling JobsApi.get_job"
      end
      # verify the required parameter 'job_uuid' is set
      if @api_client.config.client_side_validation && job_uuid.nil?
        fail ArgumentError, "Missing the required parameter 'job_uuid' when calling JobsApi.get_job"
      end
      # resource path
      local_var_path = '/webhooks/{uuid}/jobs/{jobUUID}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'jobUUID' + '}', CGI.escape(job_uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Job'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"JobsApi.get_job",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#get_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get jobs associated to Webhook
    # Retrieve an ordered and paginated list of the jobs garnered from a webhook using a given `:id`.
    # @param uuid [String] ID of webhook
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve. Up to 200. (default to 10)
    # @option opts [Integer] :offset Number of records to offset. Required for pagination. (default to 0)
    # @option opts [String] :status Narrow down records per status (default to '')
    # @return [Jobs]
    def get_jobs(uuid, opts = {})
      data, _status_code, _headers = get_jobs_with_http_info(uuid, opts)
      data
    end

    # Get jobs associated to Webhook
    # Retrieve an ordered and paginated list of the jobs garnered from a webhook using a given &#x60;:id&#x60;.
    # @param uuid [String] ID of webhook
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve. Up to 200.
    # @option opts [Integer] :offset Number of records to offset. Required for pagination.
    # @option opts [String] :status Narrow down records per status
    # @return [Array<(Jobs, Integer, Hash)>] Jobs data, response status code and response headers
    def get_jobs_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: JobsApi.get_jobs ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling JobsApi.get_jobs"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 200
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling JobsApi.get_jobs, must be smaller than or equal to 200.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling JobsApi.get_jobs, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling JobsApi.get_jobs, must be greater than or equal to 0.'
      end

      allowable_values = ["success", "failed", ""]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/webhooks/{uuid}/jobs'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Jobs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"JobsApi.get_jobs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: JobsApi#get_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
